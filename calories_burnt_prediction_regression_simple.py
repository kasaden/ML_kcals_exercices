import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

"""Data Collection & Processing"""

# loading the data from csv file to a Pandas DataFrame
calories = pd.read_csv('calories.csv')

# print the first 5 rows of the dataframe
calories.head()

exercise_data = pd.read_csv('exercise.csv')

exercise_data.head()

"""Combining the two Dataframes"""

calories_data = pd.concat([exercise_data, calories['Calories']], axis=1)

calories_data.head()

# checking the number of rows and columns
calories_data.shape

# getting some informations about the data
calories_data.info()



""" ----------------------- PREPROCESSING THE DATA ----------------------- """

# V√©rifier les valeurs manquantes ou nulles
calories_data.isnull().sum()

# Traiter les valeurs manquantes ou nulles
print("Valeurs manquantes : ")
print(calories_data.isnull().sum())

# Suprimer les lignes des valeurs manquantes ou nulles
calories_data = calories_data.dropna()

# V√©rifier et supprimer les doublons
print(f"\nNombre de doublons : {calories_data.duplicated().sum()}")
calories_data = calories_data.drop_duplicates()

# Nombre de lignes restantes apr√®s le nettoyage
print(f"\nNombre de lignes apr√®s le nettoyage : {calories_data.shape[0]}\n")

# Afficher les statistiques descriptives (aberrantes)
print(calories_data.describe())



""" ----------------------- ANALYSE DE CORR√âLATION ----------------------- """

# Convertir le genre en num√©rique pour l'analyse de corr√©lation
calories_data_numeric = calories_data.copy()
calories_data_numeric.replace({"Gender": {'male': 0, 'female': 1}}, inplace=True)

# Calculer la matrice de corr√©lation
correlation_matrix = calories_data_numeric.corr()

# 1. Corr√©lation avec la cible (Calories)
print("\nüéØ Corr√©lation avec Calories :")
print(correlation_matrix['Calories'].drop('Calories').sort_values(ascending=False))

# 2. V√©rifier l'ind√©pendance entre variables (multicolin√©arit√©)
print("\nüîç Multicolin√©arit√© (corr√©lations entre variables) :")
features_only = correlation_matrix.drop(['User_ID', 'Calories'], axis=0).drop(['User_ID', 'Calories'], axis=1)
for i in range(len(features_only.columns)):
    for j in range(i+1, len(features_only.columns)):
        corr_value = features_only.iloc[i, j]
        if abs(corr_value) > 0.7:
            print(f"   ‚ö†Ô∏è  {features_only.columns[i]} ‚Üî {features_only.columns[j]} : {corr_value:.3f}")

# 3. Visualisation
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, fmt='.2f', linewidths=0.5)
plt.title('Matrice de Corr√©lation')
plt.tight_layout()
plt.show()



""" ----------------------- S√âLECTION DES VARIABLES ----------------------- """

# Analyse des r√©sultats de corr√©lation :
# - Duration, Heart_Rate, Body_Temp sont TR√àS corr√©l√©s avec Calories (0.82 √† 0.96) ‚úÖ
# - MAIS ils sont aussi tr√®s corr√©l√©s entre eux (multicolin√©arit√©) ‚ùå
# - Gender, Age, Height, Weight ont une corr√©lation quasi nulle avec Calories ‚ùå

# D√©cision : Garder uniquement Duration (meilleure corr√©lation 0.96) et supprimer les autres
# pour √©viter la multicolin√©arit√© tout en gardant une forte pr√©diction

print("\nüîß S√âLECTION DES VARIABLES :")
print("Variables supprim√©es (faible corr√©lation ou multicolin√©arit√©) :")
print("  - Gender, Age, Height, Weight (corr√©lation ‚âà 0 avec Calories)")
print("  - Heart_Rate, Body_Temp (multicolin√©arit√© avec Duration)")
print("\nVariable gard√©e :")
print("  - Duration (corr√©lation = 0.96 avec Calories, pas de multicolin√©arit√©)\n")

# Convertir le genre pour garder une copie des donn√©es
calories_data.replace({"Gender": {'male': 0, 'female': 1}}, inplace=True)



""" ----------------------- DATA VISUALIZATION (HISTOGRAMMES) ----------------------- """

# Visualiser la distribution de la variable gard√©e
sns.histplot(calories_data['Duration'], kde=True)
plt.title('Distribution de la Dur√©e d\'exercice')
plt.xlabel('Dur√©e (minutes)')
plt.show()



""" ----------------------- R√âGRESSION LIN√âAIRE (SIMPLE) ----------------------- """

# √âTAPE 1 : S√©parer les FEATURES (X) et la TARGET (Y)
# X = uniquement Duration (variable la plus pertinente)
# Y = ce qu'on veut pr√©dire (Calories)
X = calories_data[['Duration']]  # Garder uniquement Duration
Y = calories_data['Calories']

print(f"üìä Nombre de features (variables) : {X.shape[1]}")
print(f"üìä Nombre d'exemples : {X.shape[0]}\n")

# √âTAPE 2 : Diviser les donn√©es en 70% TRAIN et 30% TEST
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.30, random_state=23)

print(f"‚úÖ Donn√©es d'entra√Ænement : {X_train.shape[0]} exemples")
print(f"‚úÖ Donn√©es de test : {X_test.shape[0]} exemples\n")

# √âTAPE 3 : Cr√©er et entra√Æner le mod√®le de R√âGRESSION LIN√âAIRE SIMPLE
# "Simple" car on utilise UNE SEULE variable (Duration)
model = LinearRegression()
model.fit(X_train, Y_train)

print("üéØ Mod√®le de r√©gression lin√©aire entra√Æn√© !\n")

# √âTAPE 4 : Afficher le COEFFICIENT (impact de Duration sur Calories)
print("üìà Coefficient du mod√®le :")
print(f"   Duration : {model.coef_[0]:.2f} calories/minute")
print(f"   Intercept (constante) : {model.intercept_:.2f}\n")
print(f"   ‚Üí Formule : Calories = {model.intercept_:.2f} + ({model.coef_[0]:.2f} √ó Duration)\n")

# √âTAPE 5 : Faire des pr√©dictions sur les donn√©es de TEST
predictions = model.predict(X_test)



""" ----------------------- R√âSULTATS ET PR√âCISION (PERFORMANCE DU MOD√àLE)----------------------- """

# MAE = Erreur Absolue Moyenne (en calories)
mae = metrics.mean_absolute_error(Y_test, predictions)
print(f"‚ùå Erreur Moyenne Absolue (MAE) : {mae:.2f} calories")

# R¬≤ Score = Qualit√© du mod√®le (entre 0 et 1)
r2 = metrics.r2_score(Y_test, predictions)
print(f"‚úÖ Score R¬≤ : {r2:.3f}\n")

# √âTAPE 8 : Visualiser les pr√©dictions VS r√©alit√©
plt.figure(figsize=(10, 6))
plt.scatter(Y_test, predictions, alpha=0.5, color='blue')
plt.plot([Y_test.min(), Y_test.max()], [Y_test.min(), Y_test.max()], 'r--', lw=2)
plt.xlabel('Calories R√©elles')
plt.ylabel('Calories Pr√©dites')
plt.title('R√©gression Lin√©aire Multiple : Pr√©dictions vs R√©alit√©')
plt.grid(True, alpha=0.3)
plt.show()



""" ----------------------- PR√âDICTIONS ----------------------- """

# √âTAPE 6 : Tester le mod√®le avec UN exemple concret
# Exemple : 30 minutes d'exercice
exemple_duration = 30
exemple = pd.DataFrame([[exemple_duration]], columns=['Duration'])
calories_predites = model.predict(exemple)

print(f"üî• EXEMPLE DE PR√âDICTION :")
print(f"   Dur√©e d'exercice : {exemple_duration} minutes")
print(f"   Calories pr√©dites : {calories_predites[0]:.2f} calories\n")



""" ----------------------- FORMULES ----------------------- """

# Afficher la formule math√©matique du mod√®le
print("üìê FORMULE MATH√âMATIQUE FINALE :")
print(f"   Calories = {model.intercept_:.2f} + ({model.coef_[0]:.2f} √ó Duration)")
print(f"\n   Exemple : Pour 30 min ‚Üí Calories = {model.intercept_:.2f} + ({model.coef_[0]:.2f} √ó 30) = {calories_predites[0]:.2f} cal")